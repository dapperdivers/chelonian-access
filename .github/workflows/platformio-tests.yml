name: PlatformIO CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Shallow clones can save time

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Cache PlatformIO
      uses: actions/cache@v3
      with:
        path: |
          ~/.platformio
          .pio
        key: ${{ runner.os }}-pio-${{ hashFiles('**/platformio.ini') }}
        restore-keys: |
          ${{ runner.os }}-pio-

    - name: Install and cache apt packages
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: lcov
        version: 1.0

    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install platformio

    - name: Run tests with coverage
      run: |
        pio test -e native
        # Generate coverage info
        lcov --capture --directory .pio/build/native/ --output-file coverage.info
        lcov --remove coverage.info '/usr/*' '*/test/*' '*/lib/mocks/*' '*/.pio/*' --output-file coverage.info --ignore-errors unused
        lcov --list coverage.info

    - name: Generate HTML coverage report
      run: |
        genhtml coverage.info --output-directory coverage-report

    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-html
        path: coverage-report/
        retention-days: 30
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-results
        path: |
          .pio/build/native/test/
          test/

  static-analysis:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Cache PlatformIO
      uses: actions/cache@v3
      with:
        path: |
          ~/.platformio
          .pio
        key: ${{ runner.os }}-pio-${{ hashFiles('**/platformio.ini') }}
        restore-keys: |
          ${{ runner.os }}-pio-

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install platformio
        # Install clang-tidy
        sudo apt-get update
        sudo apt-get install -y clang-tidy
        # Install clang-tidy-sarif for SARIF conversion (only if not cached)
        which clang-tidy-sarif || cargo install clang-tidy-sarif
        which sarif-fmt || cargo install sarif-fmt

    - name: Generate compile_commands.json
      run: |
        # Generate compilation database for native environment
        pio run -t compiledb -e native
        # The file is already generated in the project root by PlatformIO
        ls -la compile_commands.json

    - name: Run clang-tidy
      run: |
        # Create results directory
        mkdir -p clang-tidy-results

        # Run clang-tidy on all source files and convert to SARIF
        find src include -name "*.cpp" -o -name "*.h" | \
        xargs clang-tidy -p . 2>&1 | \
        tee clang-tidy-results/output.txt | \
        clang-tidy-sarif | \
        tee clang-tidy-results/results.sarif | \
        sarif-fmt

        # Also export fixes for potential auto-fixing
        find src include -name "*.cpp" -o -name "*.h" | \
        xargs clang-tidy -p . --export-fixes=clang-tidy-results/fixes.yaml 2>&1 > /dev/null || true

        # Check if there were any warnings
        if grep -q "warning:" clang-tidy-results/output.txt; then
          echo "::warning::Clang-tidy found issues. See artifacts for details."
        fi

    - name: Generate HTML report
      if: always()
      run: |
        # Ensure directory exists
        mkdir -p clang-tidy-results

        # Create a simple HTML report
        cat > clang-tidy-results/report.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
          <title>Clang-tidy Report</title>
          <style>
            body { font-family: monospace; margin: 20px; }
            .warning { color: #856404; background-color: #fff3cd; padding: 5px; margin: 5px 0; }
            .error { color: #721c24; background-color: #f8d7da; padding: 5px; margin: 5px 0; }
            pre { background-color: #f5f5f5; padding: 10px; overflow-x: auto; }
          </style>
        </head>
        <body>
          <h1>Clang-tidy Analysis Report</h1>
          <pre>
        EOF

        cat clang-tidy-results/output.txt >> clang-tidy-results/report.html

        cat >> clang-tidy-results/report.html << 'EOF'
          </pre>
        </body>
        </html>
        EOF

    - name: Upload clang-tidy results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: clang-tidy-results
        path: clang-tidy-results/
        retention-days: 30

    - name: Upload SARIF to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always() && github.event_name == 'push'
      with:
        sarif_file: clang-tidy-results/results.sarif
        category: clang-tidy

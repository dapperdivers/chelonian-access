name: Release Build

on:
  release:
    types: [published]

jobs:
  build-release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Full history for changelog generation
    
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install platformio
    
    - name: Build firmware
      run: pio run -e promicro
    
    - name: Copy and rename artifacts
      run: |
        mkdir -p release-artifacts
        cp .pio/build/promicro/firmware.elf release-artifacts/chelonian-access-${{ steps.get_version.outputs.VERSION }}.elf
        cp .pio/build/promicro/firmware.hex release-artifacts/chelonian-access-${{ steps.get_version.outputs.VERSION }}.hex
        # Check if .bin file exists (some platforms may not generate it)
        if [ -f ".pio/build/promicro/firmware.bin" ]; then
          cp .pio/build/promicro/firmware.bin release-artifacts/chelonian-access-${{ steps.get_version.outputs.VERSION }}.bin
        fi
    
    - name: Generate checksums
      run: |
        cd release-artifacts
        sha256sum * > checksums-${{ steps.get_version.outputs.VERSION }}.sha256
        echo "Checksums generated:"
        cat checksums-${{ steps.get_version.outputs.VERSION }}.sha256
    
    - name: Generate changelog
      run: |
        # Extract changelog for current version from CHANGELOG.md if it exists
        if [ -f "CHANGELOG.md" ]; then
          # Extract section between current version and previous version
          VERSION_NO_V="${{ steps.get_version.outputs.VERSION }}"
          VERSION_NO_V="${VERSION_NO_V#v}"
          
          # Try to extract the section for this version
          awk '/^## \['"$VERSION_NO_V"'\]|^## \['"${{ steps.get_version.outputs.VERSION }}"'\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md > release-artifacts/RELEASE_NOTES.md
          
          # If nothing was extracted, create a default
          if [ ! -s "release-artifacts/RELEASE_NOTES.md" ]; then
            echo "## Release ${{ steps.get_version.outputs.VERSION }}" > release-artifacts/RELEASE_NOTES.md
            echo "" >> release-artifacts/RELEASE_NOTES.md
            echo "Firmware release for Chelonian Access Access Control System" >> release-artifacts/RELEASE_NOTES.md
          fi
        else
          # Create a simple changelog entry
          echo "## Release ${{ steps.get_version.outputs.VERSION }}" > release-artifacts/RELEASE_NOTES.md
          echo "" >> release-artifacts/RELEASE_NOTES.md
          echo "Firmware release for Chelonian Access Access Control System" >> release-artifacts/RELEASE_NOTES.md
          echo "" >> release-artifacts/RELEASE_NOTES.md
          echo "### Installation" >> release-artifacts/RELEASE_NOTES.md
          echo "1. Download the appropriate firmware file (.hex for most programmers)" >> release-artifacts/RELEASE_NOTES.md
          echo "2. Verify the checksum using the checksums file" >> release-artifacts/RELEASE_NOTES.md
          echo "3. Flash to your SparkFun Pro Micro (3.3V, 8MHz)" >> release-artifacts/RELEASE_NOTES.md
        fi
        
        echo "Release notes:"
        cat release-artifacts/RELEASE_NOTES.md
    
    - name: Display build info
      run: |
        echo "Build completed for version: ${{ steps.get_version.outputs.VERSION }}"
        echo "Artifacts generated:"
        ls -la release-artifacts/
    
    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release-artifacts/*.elf
          release-artifacts/*.hex
          release-artifacts/*.bin
          release-artifacts/*.sha256
          release-artifacts/RELEASE_NOTES.md
        fail_on_unmatched_files: false  # Don't fail if .bin doesn't exist
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}